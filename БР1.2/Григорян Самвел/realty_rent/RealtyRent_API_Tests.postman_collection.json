{
  "info": {
    "name": "RealtyRent API Tests",
    "description": "Полный набор API-тестов для системы управления недвижимостью",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testBuildingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testApartmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testContractId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/../health",
              "host": ["{{baseUrl}}"],
              "path": ["..", "health"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('OK');",
                  "});",
                  "",
                  "pm.test(\"Response has timestamp field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Success",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Save token to variable\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.token) {",
                  "        pm.collectionVariables.set('authToken', jsonData.token);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"invalid\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Users have required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const user = jsonData[0];",
                  "        pm.expect(user).to.have.property('UserID');",
                  "        pm.expect(user).to.have.property('username');",
                  "        pm.expect(user).to.have.property('email');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Agents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/agents",
              "host": ["{{baseUrl}}"],
              "path": ["users", "agents"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Clients",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/clients",
              "host": ["{{baseUrl}}"],
              "path": ["users", "clients"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"testpass123\",\n  \"Phone\": \"+79001234567\",\n  \"Passport\": \"1234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('UserID');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData.username).to.eql('testuser');",
                  "});",
                  "",
                  "pm.test(\"Save user ID to variable\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.UserID) {",
                  "        pm.collectionVariables.set('testUserId', jsonData.UserID.toString());",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{testUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{testUserId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.UserID).to.eql(parseInt(pm.collectionVariables.get('testUserId')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"Updated\",\n  \"last_name\": \"Name\",\n  \"Phone\": \"+79009876543\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{testUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{testUserId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data is updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.first_name).to.eql('Updated');",
                  "    pm.expect(jsonData.last_name).to.eql('Name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{testUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{testUserId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Buildings",
      "item": [
        {
          "name": "Get All Buildings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["buildings"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Building",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"City\": \"Москва\",\n  \"Street\": \"Тверская\",\n  \"Number\": \"15\",\n  \"Type\": \"Жилой дом\",\n  \"Description\": \"Современный жилой комплекс\",\n  \"Photo\": \"/uploads/building1.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["buildings"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has building data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('BuildingID');",
                  "    pm.expect(jsonData.City).to.eql('Москва');",
                  "});",
                  "",
                  "pm.test(\"Save building ID to variable\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.BuildingID) {",
                  "        pm.collectionVariables.set('testBuildingId', jsonData.BuildingID.toString());",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Building by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/buildings/{{testBuildingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["buildings", "{{testBuildingId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct building ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.BuildingID).to.eql(parseInt(pm.collectionVariables.get('testBuildingId')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Building",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Description\": \"Обновленное описание здания\",\n  \"Type\": \"Многоэтажный дом\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buildings/{{testBuildingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["buildings", "{{testBuildingId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Apartments",
      "item": [
        {
          "name": "Get All Apartments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/apartments",
              "host": ["{{baseUrl}}"],
              "path": ["apartments"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Apartment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Number\": 15,\n  \"Square\": 75,\n  \"Description\": \"Уютная 2-комнатная квартира с ремонтом\",\n  \"Photo\": \"/uploads/apartment1.jpg\",\n  \"Cost\": 5000000,\n  \"BuildingID\": {{testBuildingId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/apartments",
              "host": ["{{baseUrl}}"],
              "path": ["apartments"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has apartment data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('ApartmentID');",
                  "    pm.expect(jsonData.Number).to.eql(15);",
                  "    pm.expect(jsonData.Cost).to.eql(5000000);",
                  "});",
                  "",
                  "pm.test(\"Save apartment ID to variable\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.ApartmentID) {",
                  "        pm.collectionVariables.set('testApartmentId', jsonData.ApartmentID.toString());",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Apartment by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/apartments/{{testApartmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["apartments", "{{testApartmentId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct apartment ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.ApartmentID).to.eql(parseInt(pm.collectionVariables.get('testApartmentId')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Apartment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Cost\": 5500000,\n  \"Description\": \"Обновленное описание квартиры\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/apartments/{{testApartmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["apartments", "{{testApartmentId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Apartment cost is updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Cost).to.eql(5500000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Contracts",
      "item": [
        {
          "name": "Get All Contracts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/contracts",
              "host": ["{{baseUrl}}"],
              "path": ["contracts"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Contract",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"AgentID\": 1,\n  \"ClientID\": 2,\n  \"ApartmentID\": {{testApartmentId}},\n  \"Status\": \"v\",\n  \"startDate\": \"2024-01-01\",\n  \"endDate\": \"2024-12-31\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/contracts",
              "host": ["{{baseUrl}}"],
              "path": ["contracts"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has contract data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('ContractID');",
                  "    pm.expect(jsonData.Status).to.eql('v');",
                  "});",
                  "",
                  "pm.test(\"Save contract ID to variable\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.ContractID) {",
                  "        pm.collectionVariables.set('testContractId', jsonData.ContractID.toString());",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Contract by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/contracts/{{testContractId}}",
              "host": ["{{baseUrl}}"],
              "path": ["contracts", "{{testContractId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct contract ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.ContractID).to.eql(parseInt(pm.collectionVariables.get('testContractId')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Contract",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Status\": \"l\",\n  \"endDate\": \"2025-12-31\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/contracts/{{testContractId}}",
              "host": ["{{baseUrl}}"],
              "path": ["contracts", "{{testContractId}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Contract status is updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.Status).to.eql('l');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Get Non-existent User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/99999",
              "host": ["{{baseUrl}}"],
              "path": ["users", "99999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unauthorized Access",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"City\": \"Москва\",\n  \"Street\": \"Тестовая\",\n  \"Number\": \"1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buildings",
              "host": ["{{baseUrl}}"],
              "path": ["buildings"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"test\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 422\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
} 